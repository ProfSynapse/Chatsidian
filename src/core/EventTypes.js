/**
 * Definitions for event types used in the Chatsidian plugin.
 *
 * This provides type safety and documentation for the event bus.
 */
/**
 * Type-safe wrapper for the EventBus.
 */
export class TypedEventBus {
    /**
     * Create a new TypedEventBus.
     * @param eventBus The EventBus instance to wrap
     */
    constructor(eventBus) {
        this.eventBus = eventBus;
    }
    /**
     * Register an event handler with type checking.
     * @param event Event name
     * @param callback Function to call when the event is emitted
     * @returns The callback function for use with offref
     */
    on(event, callback) {
        return this.eventBus.on(event, callback);
    }
    /**
     * Unregister an event handler with type checking.
     * @param event Event name
     * @param callback Function to remove from listeners
     */
    off(event, callback) {
        this.eventBus.off(event, callback);
    }
    /**
     * Emit an event to all registered listeners with type checking.
     * @param event Event name
     * @param data Data to pass to listeners
     */
    emit(event, data) {
        this.eventBus.emit(event, data);
    }
    /**
     * Emit an event and wait for all handlers to complete with type checking.
     * @param event Event name
     * @param data Data to pass to listeners
     * @returns Promise that resolves when all handlers have completed
     */
    async emitAsync(event, data) {
        await this.eventBus.emitAsync(event, data);
    }
    /**
     * Remove all event handlers.
     */
    clear() {
        this.eventBus.clear();
    }
    /**
     * Get a list of all events with listeners.
     * @returns Array of event names
     */
    getEvents() {
        return this.eventBus.getEvents();
    }
    /**
     * Check if an event has listeners.
     * @param event Event name
     * @returns True if the event has listeners
     */
    hasListeners(event) {
        return this.eventBus.hasListeners(event);
    }
    /**
     * Get the number of listeners for an event.
     * @param event Event name
     * @returns Number of listeners
     */
    listenerCount(event) {
        return this.eventBus.listenerCount(event);
    }
}
//# sourceMappingURL=data:application/json;base64,