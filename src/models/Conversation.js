/**
 * Models related to conversations and messages in the Chatsidian plugin.
 * Defines the core data structures for representing chat interactions,
 * including conversations, messages, roles, and tool usage.
 * Also provides utility functions for creating and managing these structures.
 */
/**
 * Enum for message roles in a conversation, indicating the sender.
 */
export var MessageRole;
(function (MessageRole) {
    MessageRole["User"] = "user";
    MessageRole["Assistant"] = "assistant";
    MessageRole["System"] = "system";
})(MessageRole || (MessageRole = {}));
/**
 * Provides utility functions for creating and managing Conversation and Message objects.
 */
export class ConversationUtils {
    /**
     * Creates a new Conversation object with default values and generated IDs.
     * @param title Optional title for the new conversation. Defaults to a timestamped title.
     * @returns A new Conversation object.
     */
    static createNew(title) {
        const id = this.generateId();
        const now = Date.now();
        return {
            id,
            title: title || `New Conversation (${new Date(now).toLocaleString()})`,
            createdAt: now,
            modifiedAt: now,
            messages: [],
        };
    }
    /**
     * Creates a new Message object with a generated ID and current timestamp.
     * @param role The role of the message sender (User, Assistant, System).
     * @param content The textual content of the message.
     * @returns A new Message object.
     */
    static createMessage(role, content) {
        const id = this.generateId();
        return {
            id,
            role,
            content,
            timestamp: Date.now(),
        };
    }
    /**
     * Adds a new message to a conversation immutably.
     * Updates the conversation's modifiedAt timestamp.
     * @param conversation The conversation to add the message to.
     * @param message The message to add.
     * @returns A new Conversation object with the added message.
     */
    static addMessage(conversation, message) {
        return {
            ...conversation,
            messages: [...conversation.messages, message],
            modifiedAt: Date.now(),
        };
    }
    /**
     * Generates a unique ID combining timestamp and random string.
     * @returns A unique string identifier.
     */
    static generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substring(2, 9);
    }
}
//# sourceMappingURL=data:application/json;base64,