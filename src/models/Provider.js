/**
 * Models related to AI providers and their APIs.
 * Defines the interfaces for structuring requests and responses
 * when communicating with external AI services via MCP or direct APIs.
 * Also includes common model information.
 */
/**
 * A list of common, known AI models with their relevant information.
 * This can be used for default selections or populating UI elements.
 */
export const COMMON_MODELS = [
    {
        id: 'claude-3-opus-20240229',
        name: 'Claude 3 Opus',
        provider: 'anthropic',
        contextSize: 200000,
        supportsTools: true,
        supportsJson: true,
        maxOutputTokens: 4096,
    },
    {
        id: 'claude-3-sonnet-20240229',
        name: 'Claude 3 Sonnet',
        provider: 'anthropic',
        contextSize: 200000,
        supportsTools: true,
        supportsJson: true,
        maxOutputTokens: 4096,
    },
    {
        id: 'claude-3-haiku-20240307',
        name: 'Claude 3 Haiku',
        provider: 'anthropic',
        contextSize: 200000,
        supportsTools: true,
        supportsJson: true,
        maxOutputTokens: 4096,
    },
    {
        id: 'gpt-4-turbo',
        name: 'GPT-4 Turbo',
        provider: 'openai',
        contextSize: 128000,
        supportsTools: true,
        supportsJson: true,
        maxOutputTokens: 4096,
    },
    {
        id: 'gpt-4o',
        name: 'GPT-4o',
        provider: 'openai',
        contextSize: 128000,
        supportsTools: true,
        supportsJson: true,
        maxOutputTokens: 4096,
    },
    {
        id: 'gpt-3.5-turbo',
        name: 'GPT-3.5 Turbo',
        provider: 'openai',
        contextSize: 16385,
        supportsTools: true,
        supportsJson: true,
        maxOutputTokens: 4096,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7R0FLRztBQThISDs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQWdCO0lBQ3hDO1FBQ0UsRUFBRSxFQUFFLHdCQUF3QjtRQUM1QixJQUFJLEVBQUUsZUFBZTtRQUNyQixRQUFRLEVBQUUsV0FBVztRQUNyQixXQUFXLEVBQUUsTUFBTTtRQUNuQixhQUFhLEVBQUUsSUFBSTtRQUNuQixZQUFZLEVBQUUsSUFBSTtRQUNsQixlQUFlLEVBQUUsSUFBSTtLQUN0QjtJQUNEO1FBQ0UsRUFBRSxFQUFFLDBCQUEwQjtRQUM5QixJQUFJLEVBQUUsaUJBQWlCO1FBQ3ZCLFFBQVEsRUFBRSxXQUFXO1FBQ3JCLFdBQVcsRUFBRSxNQUFNO1FBQ25CLGFBQWEsRUFBRSxJQUFJO1FBQ25CLFlBQVksRUFBRSxJQUFJO1FBQ2xCLGVBQWUsRUFBRSxJQUFJO0tBQ3RCO0lBQ0Q7UUFDRSxFQUFFLEVBQUUseUJBQXlCO1FBQzdCLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsUUFBUSxFQUFFLFdBQVc7UUFDckIsV0FBVyxFQUFFLE1BQU07UUFDbkIsYUFBYSxFQUFFLElBQUk7UUFDbkIsWUFBWSxFQUFFLElBQUk7UUFDbEIsZUFBZSxFQUFFLElBQUk7S0FDdEI7SUFDRDtRQUNFLEVBQUUsRUFBRSxhQUFhO1FBQ2pCLElBQUksRUFBRSxhQUFhO1FBQ25CLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLFdBQVcsRUFBRSxNQUFNO1FBQ25CLGFBQWEsRUFBRSxJQUFJO1FBQ25CLFlBQVksRUFBRSxJQUFJO1FBQ2xCLGVBQWUsRUFBRSxJQUFJO0tBQ3RCO0lBQ0Q7UUFDRSxFQUFFLEVBQUUsUUFBUTtRQUNaLElBQUksRUFBRSxRQUFRO1FBQ2QsUUFBUSxFQUFFLFFBQVE7UUFDbEIsV0FBVyxFQUFFLE1BQU07UUFDbkIsYUFBYSxFQUFFLElBQUk7UUFDbkIsWUFBWSxFQUFFLElBQUk7UUFDbEIsZUFBZSxFQUFFLElBQUk7S0FDdEI7SUFDRDtRQUNFLEVBQUUsRUFBRSxlQUFlO1FBQ25CLElBQUksRUFBRSxlQUFlO1FBQ3JCLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLFdBQVcsRUFBRSxLQUFLO1FBQ2xCLGFBQWEsRUFBRSxJQUFJO1FBQ25CLFlBQVksRUFBRSxJQUFJO1FBQ2xCLGVBQWUsRUFBRSxJQUFJO0tBQ3RCO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBNb2RlbHMgcmVsYXRlZCB0byBBSSBwcm92aWRlcnMgYW5kIHRoZWlyIEFQSXMuXHJcbiAqIERlZmluZXMgdGhlIGludGVyZmFjZXMgZm9yIHN0cnVjdHVyaW5nIHJlcXVlc3RzIGFuZCByZXNwb25zZXNcclxuICogd2hlbiBjb21tdW5pY2F0aW5nIHdpdGggZXh0ZXJuYWwgQUkgc2VydmljZXMgdmlhIE1DUCBvciBkaXJlY3QgQVBJcy5cclxuICogQWxzbyBpbmNsdWRlcyBjb21tb24gbW9kZWwgaW5mb3JtYXRpb24uXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBtZXNzYWdlIGluIHRoZSBmb3JtYXQgZXhwZWN0ZWQgYnkgQUkgcHJvdmlkZXJzLlxyXG4gKiBUaGlzIG9mdGVuIGRpZmZlcnMgc2xpZ2h0bHkgZnJvbSB0aGUgaW50ZXJuYWwgYE1lc3NhZ2VgIGludGVyZmFjZS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUHJvdmlkZXJNZXNzYWdlIHtcclxuICAvKiogVGhlIHJvbGUgb2YgdGhlIG1lc3NhZ2Ugc2VuZGVyIChlLmcuLCAndXNlcicsICdhc3Npc3RhbnQnKSAqL1xyXG4gIHJvbGU6IHN0cmluZztcclxuXHJcbiAgLyoqIFRoZSBjb250ZW50IG9mIHRoZSBtZXNzYWdlICovXHJcbiAgY29udGVudDogc3RyaW5nO1xyXG5cclxuICAvKiogT3B0aW9uYWwgdG9vbCBjYWxscyBtYWRlIGJ5IHRoaXMgbWVzc2FnZSAocHJvdmlkZXItc3BlY2lmaWMgZm9ybWF0KSAqL1xyXG4gIHRvb2xDYWxscz86IGFueVtdO1xyXG5cclxuICAvKiogT3B0aW9uYWwgdG9vbCByZXN1bHRzIGZyb20gdG9vbCBjYWxscyAocHJvdmlkZXItc3BlY2lmaWMgZm9ybWF0KSAqL1xyXG4gIHRvb2xSZXN1bHRzPzogYW55W107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGEgcmVxdWVzdCBwYXlsb2FkIHNlbnQgdG8gYW4gQUkgcHJvdmlkZXIncyBBUEkuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFByb3ZpZGVyUmVxdWVzdCB7XHJcbiAgLyoqIFRoZSBzZXF1ZW5jZSBvZiBtZXNzYWdlcyBmb3JtaW5nIHRoZSBjb252ZXJzYXRpb24gaGlzdG9yeSAqL1xyXG4gIG1lc3NhZ2VzOiBQcm92aWRlck1lc3NhZ2VbXTtcclxuXHJcbiAgLyoqIFRoZSBzcGVjaWZpYyBtb2RlbCBpZGVudGlmaWVyIHRvIHVzZSBmb3IgdGhlIHJlcXVlc3QgKi9cclxuICBtb2RlbDogc3RyaW5nO1xyXG5cclxuICAvKiogT3B0aW9uYWwgcGFyYW1ldGVyIGNvbnRyb2xsaW5nIHJhbmRvbW5lc3MgKDAuMCB0byAxLjApICovXHJcbiAgdGVtcGVyYXR1cmU/OiBudW1iZXI7XHJcblxyXG4gIC8qKiBPcHRpb25hbCBwYXJhbWV0ZXIgbGltaXRpbmcgdGhlIG1heGltdW0gbnVtYmVyIG9mIHRva2VucyBpbiB0aGUgcmVzcG9uc2UgKi9cclxuICBtYXhUb2tlbnM/OiBudW1iZXI7XHJcblxyXG4gIC8qKiBPcHRpb25hbCBsaXN0IG9mIHRvb2xzIGF2YWlsYWJsZSB0byB0aGUgbW9kZWwgKHByb3ZpZGVyLXNwZWNpZmljIGZvcm1hdCkgKi9cclxuICB0b29scz86IGFueVtdO1xyXG5cclxuICAvKiogV2hldGhlciB0byByZXF1ZXN0IGEgc3RyZWFtaW5nIHJlc3BvbnNlIGZyb20gdGhlIHByb3ZpZGVyICovXHJcbiAgc3RyZWFtPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBjb21wbGV0ZSAobm9uLXN0cmVhbWVkKSByZXNwb25zZSBmcm9tIGFuIEFJIHByb3ZpZGVyLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQcm92aWRlclJlc3BvbnNlIHtcclxuICAvKiogVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSByZXNwb25zZSwgdXN1YWxseSBwcm92aWRlZCBieSB0aGUgQVBJICovXHJcbiAgaWQ6IHN0cmluZztcclxuXHJcbiAgLyoqIFRoZSBtZXNzYWdlIHJldHVybmVkIGJ5IHRoZSBwcm92aWRlciAqL1xyXG4gIG1lc3NhZ2U6IFByb3ZpZGVyTWVzc2FnZTtcclxuXHJcbiAgLyoqIE9wdGlvbmFsIHRvb2wgY2FsbHMgbWFkZSBieSB0aGUgbW9kZWwgaW4gaXRzIHJlc3BvbnNlICovXHJcbiAgdG9vbENhbGxzPzogYW55W107XHJcblxyXG4gIC8vIEFkZCBvdGhlciBjb21tb24gcmVzcG9uc2UgZmllbGRzIGxpa2UgdXNhZ2Ugc3RhdGlzdGljcyBpZiBuZWVkZWRcclxuICAvLyB1c2FnZT86IHsgaW5wdXRfdG9rZW5zOiBudW1iZXI7IG91dHB1dF90b2tlbnM6IG51bWJlciB9O1xyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIHNpbmdsZSBjaHVuayBvZiBkYXRhIGluIGEgc3RyZWFtZWQgcmVzcG9uc2UgZnJvbSBhbiBBSSBwcm92aWRlci5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUHJvdmlkZXJDaHVuayB7XHJcbiAgLyoqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgcmVzcG9uc2Ugc3RyZWFtIHRoaXMgY2h1bmsgYmVsb25ncyB0byAqL1xyXG4gIGlkOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBUaGUgaW5jcmVtZW50YWwgdXBkYXRlIGNvbnRhaW5lZCBpbiB0aGlzIGNodW5rICovXHJcbiAgZGVsdGE6IHtcclxuICAgIC8qKiBPcHRpb25hbCB0ZXh0IGNvbnRlbnQgZGVsdGEgKi9cclxuICAgIGNvbnRlbnQ/OiBzdHJpbmc7XHJcblxyXG4gICAgLyoqIE9wdGlvbmFsIHRvb2wgY2FsbCB1cGRhdGVzIChwcm92aWRlci1zcGVjaWZpYyBmb3JtYXQpICovXHJcbiAgICB0b29sQ2FsbHM/OiBhbnlbXTtcclxuXHJcbiAgICAvLyBBZGQgb3RoZXIgcG90ZW50aWFsIGRlbHRhIGZpZWxkcyBsaWtlIHJvbGUgY2hhbmdlcyBpZiBhcHBsaWNhYmxlXHJcbiAgICAvLyByb2xlPzogc3RyaW5nO1xyXG4gIH07XHJcblxyXG4gIC8vIEFkZCBvdGhlciBjaHVuayBtZXRhZGF0YSBpZiBuZWVkZWQsIGUuZy4sIHNlcXVlbmNlIG51bWJlciwgZmluaXNoIHJlYXNvblxyXG4gIC8vIGZpbmlzaF9yZWFzb24/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGFuIGVycm9yIHJldHVybmVkIGZyb20gYW4gQUkgcHJvdmlkZXIncyBBUEkuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFByb3ZpZGVyRXJyb3Ige1xyXG4gIC8qKiBFcnJvciBjb2RlIHByb3ZpZGVkIGJ5IHRoZSBBUEkgKi9cclxuICBjb2RlOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBIdW1hbi1yZWFkYWJsZSBlcnJvciBtZXNzYWdlICovXHJcbiAgbWVzc2FnZTogc3RyaW5nO1xyXG5cclxuICAvKiogT3B0aW9uYWwgZmllbGQgaW5kaWNhdGluZyB0aGUgcGFyYW1ldGVyIHRoYXQgY2F1c2VkIHRoZSBlcnJvciAqL1xyXG4gIHBhcmFtPzogc3RyaW5nO1xyXG5cclxuICAvKiogVHlwZSBvZiBlcnJvciAoZS5nLiwgJ2FwaV9lcnJvcicsICdpbnZhbGlkX3JlcXVlc3RfZXJyb3InKSAqL1xyXG4gIHR5cGU6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgbWV0YWRhdGEgYWJvdXQgYSBzcGVjaWZpYyBBSSBtb2RlbCBhdmFpbGFibGUgZnJvbSBhIHByb3ZpZGVyLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNb2RlbEluZm8ge1xyXG4gIC8qKiBVbmlxdWUgaWRlbnRpZmllciB1c2VkIGluIEFQSSByZXF1ZXN0cyAoZS5nLiwgJ2NsYXVkZS0zLW9wdXMtMjAyNDAyMjknKSAqL1xyXG4gIGlkOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBVc2VyLWZyaWVuZGx5IGRpc3BsYXkgbmFtZSBmb3IgdGhlIG1vZGVsIChlLmcuLCAnQ2xhdWRlIDMgT3B1cycpICovXHJcbiAgbmFtZTogc3RyaW5nO1xyXG5cclxuICAvKiogVGhlIHByb3ZpZGVyIG9mZmVyaW5nIHRoaXMgbW9kZWwgKGUuZy4sICdhbnRocm9waWMnLCAnb3BlbmFpJykgKi9cclxuICBwcm92aWRlcjogc3RyaW5nO1xyXG5cclxuICAvKiogTWF4aW11bSBjb250ZXh0IHdpbmRvdyBzaXplIGluIHRva2VucyAqL1xyXG4gIGNvbnRleHRTaXplOiBudW1iZXI7XHJcblxyXG4gIC8qKiBXaGV0aGVyIHRoZSBtb2RlbCBzdXBwb3J0cyBmdW5jdGlvbi90b29sIGNhbGxpbmcgKi9cclxuICBzdXBwb3J0c1Rvb2xzOiBib29sZWFuO1xyXG5cclxuICAvKiogV2hldGhlciB0aGUgbW9kZWwgaXMgZXhwbGljaXRseSBkZXNpZ25lZCBmb3Igb3Igc3VwcG9ydHMgSlNPTiBvdXRwdXQgbW9kZSAqL1xyXG4gIHN1cHBvcnRzSnNvbj86IGJvb2xlYW47XHJcblxyXG4gIC8qKiBNYXhpbXVtIG51bWJlciBvZiB0b2tlbnMgdGhlIG1vZGVsIGNhbiBnZW5lcmF0ZSBpbiBhIHNpbmdsZSByZXNwb25zZSAqL1xyXG4gIG1heE91dHB1dFRva2Vucz86IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgbGlzdCBvZiBjb21tb24sIGtub3duIEFJIG1vZGVscyB3aXRoIHRoZWlyIHJlbGV2YW50IGluZm9ybWF0aW9uLlxyXG4gKiBUaGlzIGNhbiBiZSB1c2VkIGZvciBkZWZhdWx0IHNlbGVjdGlvbnMgb3IgcG9wdWxhdGluZyBVSSBlbGVtZW50cy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBDT01NT05fTU9ERUxTOiBNb2RlbEluZm9bXSA9IFtcclxuICB7XHJcbiAgICBpZDogJ2NsYXVkZS0zLW9wdXMtMjAyNDAyMjknLFxyXG4gICAgbmFtZTogJ0NsYXVkZSAzIE9wdXMnLFxyXG4gICAgcHJvdmlkZXI6ICdhbnRocm9waWMnLFxyXG4gICAgY29udGV4dFNpemU6IDIwMDAwMCxcclxuICAgIHN1cHBvcnRzVG9vbHM6IHRydWUsXHJcbiAgICBzdXBwb3J0c0pzb246IHRydWUsXHJcbiAgICBtYXhPdXRwdXRUb2tlbnM6IDQwOTYsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ2NsYXVkZS0zLXNvbm5ldC0yMDI0MDIyOScsXHJcbiAgICBuYW1lOiAnQ2xhdWRlIDMgU29ubmV0JyxcclxuICAgIHByb3ZpZGVyOiAnYW50aHJvcGljJyxcclxuICAgIGNvbnRleHRTaXplOiAyMDAwMDAsXHJcbiAgICBzdXBwb3J0c1Rvb2xzOiB0cnVlLFxyXG4gICAgc3VwcG9ydHNKc29uOiB0cnVlLFxyXG4gICAgbWF4T3V0cHV0VG9rZW5zOiA0MDk2LFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdjbGF1ZGUtMy1oYWlrdS0yMDI0MDMwNycsXHJcbiAgICBuYW1lOiAnQ2xhdWRlIDMgSGFpa3UnLFxyXG4gICAgcHJvdmlkZXI6ICdhbnRocm9waWMnLFxyXG4gICAgY29udGV4dFNpemU6IDIwMDAwMCxcclxuICAgIHN1cHBvcnRzVG9vbHM6IHRydWUsXHJcbiAgICBzdXBwb3J0c0pzb246IHRydWUsXHJcbiAgICBtYXhPdXRwdXRUb2tlbnM6IDQwOTYsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ2dwdC00LXR1cmJvJyxcclxuICAgIG5hbWU6ICdHUFQtNCBUdXJibycsXHJcbiAgICBwcm92aWRlcjogJ29wZW5haScsXHJcbiAgICBjb250ZXh0U2l6ZTogMTI4MDAwLFxyXG4gICAgc3VwcG9ydHNUb29sczogdHJ1ZSxcclxuICAgIHN1cHBvcnRzSnNvbjogdHJ1ZSxcclxuICAgIG1heE91dHB1dFRva2VuczogNDA5NixcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnZ3B0LTRvJyxcclxuICAgIG5hbWU6ICdHUFQtNG8nLFxyXG4gICAgcHJvdmlkZXI6ICdvcGVuYWknLFxyXG4gICAgY29udGV4dFNpemU6IDEyODAwMCxcclxuICAgIHN1cHBvcnRzVG9vbHM6IHRydWUsXHJcbiAgICBzdXBwb3J0c0pzb246IHRydWUsXHJcbiAgICBtYXhPdXRwdXRUb2tlbnM6IDQwOTYsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ2dwdC0zLjUtdHVyYm8nLFxyXG4gICAgbmFtZTogJ0dQVC0zLjUgVHVyYm8nLFxyXG4gICAgcHJvdmlkZXI6ICdvcGVuYWknLFxyXG4gICAgY29udGV4dFNpemU6IDE2Mzg1LFxyXG4gICAgc3VwcG9ydHNUb29sczogdHJ1ZSxcclxuICAgIHN1cHBvcnRzSnNvbjogdHJ1ZSxcclxuICAgIG1heE91dHB1dFRva2VuczogNDA5NixcclxuICB9LFxyXG5dO1xyXG4iXX0=