/**
 * Obsidian imports utility.
 *
 * This file provides a way to import Obsidian classes in a way that works
 * in both production and test environments. In production, it imports from
 * the actual Obsidian module. In tests, it imports from our mock implementation.
 */
// Import implementations
let AppImpl;
let PluginSettingTabImpl;
let SettingImpl;
let PluginImpl;
let EventsImpl;
let TFileImpl;
let TFolderImpl;
let NoticeImpl;
try {
    // Try to import from the real Obsidian module
    const obsidian = require('obsidian');
    AppImpl = obsidian.App;
    PluginSettingTabImpl = obsidian.PluginSettingTab;
    SettingImpl = obsidian.Setting;
    PluginImpl = obsidian.Plugin;
    EventsImpl = obsidian.Events;
    TFileImpl = obsidian.TFile;
    TFolderImpl = obsidian.TFolder;
    NoticeImpl = obsidian.Notice;
}
catch (e) {
    // If that fails, use our mock implementations
    try {
        const mocks = require('../../tests/mocks/obsidian');
        AppImpl = mocks.App;
        PluginSettingTabImpl = mocks.PluginSettingTab;
        SettingImpl = mocks.Setting;
        PluginImpl = mocks.Plugin;
        EventsImpl = mocks.Events;
        TFileImpl = mocks.TFile;
        TFolderImpl = mocks.TFolder;
        NoticeImpl = mocks.Notice;
    }
    catch (e) {
        // If both fail, provide dummy implementations
        console.warn('Neither Obsidian nor mocks could be loaded. Using dummy implementations.');
        class DummyClass {
            constructor() {
                console.warn('Using dummy Obsidian class');
            }
        }
        AppImpl = DummyClass;
        PluginSettingTabImpl = DummyClass;
        SettingImpl = DummyClass;
        PluginImpl = DummyClass;
        EventsImpl = DummyClass;
        TFileImpl = DummyClass;
        TFolderImpl = DummyClass;
        NoticeImpl = DummyClass;
    }
}
// Export implementations
export const App = AppImpl;
export const PluginSettingTab = PluginSettingTabImpl;
export const Setting = SettingImpl;
export const Plugin = PluginImpl;
export const Events = EventsImpl;
export const TFile = TFileImpl;
export const TFolder = TFolderImpl;
export const Notice = NoticeImpl;
//# sourceMappingURL=data:application/json;base64,